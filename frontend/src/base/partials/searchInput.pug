section.search-input-container
  .search-input
    fieldset(aria-label="Search for file format, software or vendor")
      legend.sr-only Enter search file format name, PUID or keywords
      div
        label.sr-only(for="pronom_search") Search Pronom
        input(type="search", id="pronom_search", name="q", th:value="${q ?: ''}", placeholder="Search for file format, software or vendor...")
        button(type="submit")
          i.fa-solid.fa-magnifying-glass(aria-hidden="true")
          | Search
  .filters(aria-label="Filters")
    h2 Filters
    fieldset#filters
      legend.sr-only Select filter
      div.each-filter
        input#extension(type='checkbox' name='f_name' th:value="${f_name}" th:checked="${f_name}")
        label(for='extension') File format name
      div.each-filter
        input#name(type='checkbox' name='f_ext' th:value="${f_ext}" th:checked="${f_ext}")
        label(for='name') File format extension
      div.each-filter
        input#type(type='checkbox' name='f_desc' th:value="${f_desc}" th:checked="${f_desc}")
        label(for='type') File format description
      div.each-filter
        input#puid(type='checkbox' name='f_puid' th:value="${f_puid}" th:checked="${f_puid}")
        label(for='puid') PUID

section.search-output
  h3 
    | Showing&nbsp;
    span(th:text="'('+${totalResults}+')'")
      span(th:if="${results = null and results.empty}") 0
    |  results
  .results-manager

    div(th:if="${results = null and results.empty}")
      include ../partials/noResults.pug
    div(th:if="${results != null and !results.empty}")
      .additionals
        .manage-results
          .result-counts
            fieldset(aria-label="Set number of result per page")
              label(for="results_per_page") Show
              legend.sr-only Change number of results per page
              div
                input(id="results_per_page", class="small", maxlength="2", type="number", min="5", max="99", th:value="${pageSize}")
          .sort-by
            fieldset(aria-label="Sort search results by selected measure")
              legend.sr-only Sort search results by selected measure
              label(for="sort_by") Sort by
              div
                select(id="sort_by", name="sort", th:value="${sort}")
                  option(th:selected="${sort eq 'relevance'}", value='relevance') relevance
                  option(th:selected="${sort eq 'type'}", value='type') type
                  option(th:selected="${sort eq 'name'}", value='name') name
                  option(th:selected="${sort eq 'puid'}", value='puid') PUID
        .save-options
          label(for="save_as") Save as
          .button-list
            button.xsmall.bordered-blue
              | XML
            button.xsmall.bordered-blue
              | CSV
            .dropdown-group
              button.xsmall.bordered-blue
                | RDF
              select(id="save_as")
                option(value='0') TTL
                option(value='1') NT
                option(value='2') RDF/XML
      .all-results
        ul
          li.column-names
            h4 Type
            h4 Name
            h4 Basic information
            h4 Description
            h4.extended Status
            h4.extended Maintain
          li.results-container
            ul.results
              th:block(th:each="r : ${results}")
                li
                  a(th:href="@{/id/{target}(target=${r.idUri})}")
                    div
                      p.data.type(th:utext="'<span>Type</span>'+${r.stringType}")
                        span Type
                        | File format
                      h5.data.name(th:utext="'<span>Name</span>'+${r.HTMLName}")
                        span Name
                        | Portable Network Graphics
                      div.basic
                        p.data(th:each="i : ${r.HTMLProperties}", th:utext="'<span>'+${i.key}+'</span>'+${i.value}")
                          span PUID
                          | fmt/412
                      p.data.desc(th:utext="'<span>Description</span>'+${r.HTMLDescription}")
                        span Description
                        | fmt/412
                      p.data.extend.status
                        span Status
                        | Released
                      .extend.buttons
                        button.xsmall.bordered-blue(th:target="${editorial} ? '_blank': null", th:href="@{/id/{target}(target=${r.idUri})}") View
                        button.xsmall.bordered-blue(th:with="baseUrl=(${editorial} ? '/editorial/form/{target}' : '/contribute/form/{target}')", th:href="@{${baseUrl}(target=${r.puid})}") Clone
                        button.xsmall.bordered-red(th:if="${editorial}") Delete
            //- Example with multiple basic data properties
            //- Uncomment to test while running the frontend with no backend
            //- li
            //-   a(href="")
            //-     div
            //-       p.data.type
            //-         span Type
            //-         | File format
            //-       h5.data.name
            //-         span Name
            //-         | Portable Network Graphics
            //-       div.basic
            //-         p.data
            //-           span Version
            //-           | 3.0.0
            //-         p.data
            //-           span PUID
            //-           | fmt/412
            //-         p.data
            //-           span Last Updated
            //-           | 2015-08-03T00:00:00
            //-         p.data
            //-           span File Extension(s)
            //-           | png
            //-       p.data.desc
            //-         span Description
            //-         | Portable Network Graphics (PNG) was designed for the lossless, portable, compressed storage of raster images.  PNG provides a patent-free replacement for GIF and can also replace many common uses of TIFF. Indexed-color, grayscale, and truecolor images are supported, plus an optional alpha channel. Sample depths range from 1 to 16 bits. PNG is designed to work in online viewing applications, so it is fully streamable.  It can store gamma and chromaticity.  PNG also detects file corruption.
            //-       p.data.extend.status
            //-         span Status
            //-         | Released
            //-       .extend.buttons
            //-         button.xsmall.bordered-blue View
            //-         button.xsmall.bordered-blue Clone
            //-         button.xsmall.bordered-red Delete


        .pagination
          ul
            th:block(th:each="p : ${pages}")
              li(th:class="${p.text eq 'Next' || p.text eq 'Previous' ? 'controls' : ''}",
                th:classappend="${p.active ? 'active' : ''}")
                a(th:with="urlBuilder=${T(org.springframework.web.servlet.support.ServletUriComponentsBuilder).fromCurrentRequest()}", 
                  th:href="${urlBuilder.replaceQueryParam('offset', p.offset).toUriString()}",
                  th:text="${p.text}") #
